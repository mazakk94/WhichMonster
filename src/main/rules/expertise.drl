package rules

import com.sample.DroolsTest.*;
import com.java_layer.*;

rule "Song chosen"
	salience 2000
	when
		Fact(name("chosen"), value(true))
	then
		Communication.showMessage("chosen");
		drools.halt();
end

rule "No matching song in database"
	salience -1
	when
	then
		Communication.showMessage("not_chosen");
		drools.halt();
end

rule "Ask about difficulty"
	salience 10
	when
	then
		Communication.askQuestion("difficulty");
end

rule "Ask about year"
	salience 10
	when
		Fact(name("difficulty"))
	then
		Communication.askQuestion("year");
end

rule "Ask about song's lenght"
	salience 10
	when
		Fact(name("year"))
	then
		Communication.askQuestion("song's_length");
end

rule "Ask if song should have up to 500 notes"
	salience 1
	when
		(or
			Fact(name("difficulty"), value("easy"))
			Fact(name("difficulty"), value("no_care"))
		)
		not(exists Fact(name("about800notes")))
		not(exists Fact(name("over1000notes")))
	then
		Communication.askQuestion("below500notes");
end

rule "Ask if song should have about 800 notes"
	salience 1
	when
		(or
			Fact(name("difficulty"), value("medium"))
			Fact(name("difficulty"), value("no_care"))
		)
		not Fact(name("hardcores"), value(true))
		not(exists Fact(name("over1000notes")))
		not(exists Fact(name("below500notes")))
	then
		Communication.askQuestion("about800notes");
end

rule "Ask if song should have over 1000 notes"
	salience 1
	when
		(or
			Fact(name("difficulty"), value("hard"))
			Fact(name("difficulty"), value("no_care"))
		)
		not(exists Fact(name("about800notes")))
		not(exists Fact(name("below500notes")))
	then
		Communication.askQuestion("over1000notes");
end

rule "Ask if user want a lame song"
	salience 1
	when
		Fact(name("difficulty"), value("easy"))
	then
		Communication.askQuestion("lame_song");
end

rule "Ask if user want song without any solo"
	salience 1
	when
		not Fact(name("difficulty"), value("hard"))
		not Fact(name("severe_solos"), value(true))
	then
		Communication.askQuestion("without_solo");
end

rule "Ask if user like alternative rock"
	salience 2
	when
	(or
		Fact(name("lame_song"), value(true))
		Fact(name("difficulty"), value("hard"))
		Fact(name("difficulty"), value("no_care"))
	)
	not Fact(name("year"), value("knight"))
	then
		Communication.askQuestion("like_alternative_rock");
end

rule "Ask if user likes indie rock"
	salience 2
	when
		Fact(name("lame_song"), value(true))
		Fact(name("without_solo"), value(false))
		Fact(name("below500notes"), value(false))
	then
		Communication.askQuestion("like_indie_rock");
end

rule "Ask if user like glam metal"
	salience 2
	when
		(or
			Fact(name("difficulty"), value("easy")) 
			Fact(name("difficulty"), value("no_care"))
		)
		Fact(name("without_solo"), value(false))
		Fact(name("song's_length"), value("short"))
	then
		Communication.askQuestion("like_glam_metal");
end

rule "Ask about hardcores"
	salience 1
	when
		not Fact(name("about800notes"), value(true))
		(or
			Fact(name("difficulty"), value("hard"))
			Fact(name("difficulty"), value("no_care"))
		)
	then
		Communication.askQuestion("hardcores");
end

rule "Ask if user want severe, pronounced solos"
	salience 2
	when
		Fact(name("hardcores"), value(true))
		not Fact(name("without_solo"), value(true))
	then
		Communication.askQuestion("severe_solos");
end

rule "Ask if user likes heavy metal"
	salience 2
	when
		(or
			Fact(name("hardcores"), value(true))
			(and
				Fact(name("difficulty"), value("easy"))
				Fact(name("lame_song"), value(false))
				Fact(name("below500notes"), value(false))
			)
			Fact(name("difficulty"), value("medium"))
			Fact(name("difficulty"), value("hard"))
			Fact(name("difficulty"), value("no_care"))
		)
		not Fact(name("like_hard_rock"), value(true))
		not Fact(name("like_heavy_metal"))
	then
		Communication.askQuestion("like_heavy_metal");
end

rule "Ask if user likes hard rock"
	salience 2
	when
		(or
			Fact(name("difficulty"), value("hard"))
			(and
				Fact(name("difficulty"), value("easy"))
				Fact(name("lame_song"), value(false))
				Fact(name("below500notes"), value(false))
			)
			Fact(name("difficulty"), value("medium"))
			Fact(name("difficulty"), value("no_care"))
		)
		not Fact(name("like_heavy_metal"), value(true))
	then
		Communication.askQuestion("like_hard_rock");
end

rule "Ask if user like Dragonforce"
	salience 2
	when
		Fact(name("hardcores"), value(true))
		(or
			Fact(name("year"), value("druid"))
			Fact(name("year"), value("no_care"))
		)
		not Fact(name("over1000notes"), value(false))
		not Fact(name("song's_length"), value("short"))
	then
		Communication.askQuestion("dragonforce");
end
//18